package beacon_java.phase0;

import beacon_java.phase0.data.*;
import beacon_java.pylib.*;
import beacon_java.ssz.*;

import static beacon_java.pylib.Exports.*;
import static beacon_java.util.Exports.ceillog2;

public interface Constants {
  public static String CONFIG_NAME = "mainnet";
  public static Slot GENESIS_SLOT = new Slot(pyint.create(0L));
  public static Epoch GENESIS_EPOCH = new Epoch(pyint.create(0L));
  public static Epoch FAR_FUTURE_EPOCH = new Epoch(minus(power(pyint.create(2L), pyint.create(64L)), pyint.create(1L)));
  public static uint64 BASE_REWARDS_PER_EPOCH = new uint64(pyint.create(4L));
  public static uint64 DEPOSIT_CONTRACT_TREE_DEPTH = new uint64(power(pyint.create(2L), pyint.create(5L)));
  public static uint64 JUSTIFICATION_BITS_LENGTH = new uint64(pyint.create(4L));
  public static String ENDIANNESS = "little";
  public static uint64 ETH1_FOLLOW_DISTANCE = new uint64(power(pyint.create(2L), pyint.create(11L)));
  public static uint64 MAX_COMMITTEES_PER_SLOT = new uint64(power(pyint.create(2L), pyint.create(6L)));
  public static uint64 TARGET_COMMITTEE_SIZE = new uint64(power(pyint.create(2L), pyint.create(7L)));
  public static uint64 MAX_VALIDATORS_PER_COMMITTEE = new uint64(power(pyint.create(2L), pyint.create(11L)));
  public static uint64 MIN_PER_EPOCH_CHURN_LIMIT = new uint64(power(pyint.create(2L), pyint.create(2L)));
  public static uint64 CHURN_LIMIT_QUOTIENT = new uint64(power(pyint.create(2L), pyint.create(16L)));
  public static uint64 SHUFFLE_ROUND_COUNT = new uint64(pyint.create(90L));
  public static uint64 MIN_GENESIS_ACTIVE_VALIDATOR_COUNT = new uint64(power(pyint.create(2L), pyint.create(14L)));
  public static uint64 MIN_GENESIS_TIME = new uint64(pyint.create(1606824000L));
  public static uint64 HYSTERESIS_QUOTIENT = new uint64(pyint.create(4L));
  public static uint64 HYSTERESIS_DOWNWARD_MULTIPLIER = new uint64(pyint.create(1L));
  public static uint64 HYSTERESIS_UPWARD_MULTIPLIER = new uint64(pyint.create(5L));
  public static Gwei MIN_DEPOSIT_AMOUNT = new Gwei(multiply(power(pyint.create(2L), pyint.create(0L)), power(pyint.create(10L), pyint.create(9L))));
  public static Gwei MAX_EFFECTIVE_BALANCE = new Gwei(multiply(power(pyint.create(2L), pyint.create(5L)), power(pyint.create(10L), pyint.create(9L))));
  public static Gwei EJECTION_BALANCE = new Gwei(multiply(power(pyint.create(2L), pyint.create(4L)), power(pyint.create(10L), pyint.create(9L))));
  public static Gwei EFFECTIVE_BALANCE_INCREMENT = new Gwei(multiply(power(pyint.create(2L), pyint.create(0L)), power(pyint.create(10L), pyint.create(9L))));
  public static Version GENESIS_FORK_VERSION = new Version("0x00000000");
  public static Bytes1 BLS_WITHDRAWAL_PREFIX = new Bytes1("0x00");
  public static uint64 GENESIS_DELAY = new uint64(pyint.create(604800L));
  public static uint64 SECONDS_PER_SLOT = new uint64(pyint.create(12L));
  public static uint64 SECONDS_PER_ETH1_BLOCK = new uint64(pyint.create(14L));
  public static uint64 MIN_ATTESTATION_INCLUSION_DELAY = new uint64(power(pyint.create(2L), pyint.create(0L)));
  public static uint64 SLOTS_PER_EPOCH = new uint64(power(pyint.create(2L), pyint.create(5L)));
  public static uint64 MIN_SEED_LOOKAHEAD = new uint64(power(pyint.create(2L), pyint.create(0L)));
  public static uint64 MAX_SEED_LOOKAHEAD = new uint64(power(pyint.create(2L), pyint.create(2L)));
  public static uint64 MIN_EPOCHS_TO_INACTIVITY_PENALTY = new uint64(power(pyint.create(2L), pyint.create(2L)));
  public static uint64 EPOCHS_PER_ETH1_VOTING_PERIOD = new uint64(power(pyint.create(2L), pyint.create(6L)));
  public static uint64 SLOTS_PER_HISTORICAL_ROOT = new uint64(power(pyint.create(2L), pyint.create(13L)));
  public static uint64 MIN_VALIDATOR_WITHDRAWABILITY_DELAY = new uint64(power(pyint.create(2L), pyint.create(8L)));
  public static uint64 SHARD_COMMITTEE_PERIOD = new uint64(power(pyint.create(2L), pyint.create(8L)));
  public static uint64 EPOCHS_PER_HISTORICAL_VECTOR = new uint64(power(pyint.create(2L), pyint.create(16L)));
  public static uint64 EPOCHS_PER_SLASHINGS_VECTOR = new uint64(power(pyint.create(2L), pyint.create(13L)));
  public static uint64 HISTORICAL_ROOTS_LIMIT = new uint64(power(pyint.create(2L), pyint.create(24L)));
  public static uint64 VALIDATOR_REGISTRY_LIMIT = new uint64(power(pyint.create(2L), pyint.create(40L)));
  public static uint64 BASE_REWARD_FACTOR = new uint64(power(pyint.create(2L), pyint.create(6L)));
  public static uint64 WHISTLEBLOWER_REWARD_QUOTIENT = new uint64(power(pyint.create(2L), pyint.create(9L)));
  public static uint64 PROPOSER_REWARD_QUOTIENT = new uint64(power(pyint.create(2L), pyint.create(3L)));
  public static uint64 INACTIVITY_PENALTY_QUOTIENT = new uint64(power(pyint.create(2L), pyint.create(26L)));
  public static uint64 MIN_SLASHING_PENALTY_QUOTIENT = new uint64(power(pyint.create(2L), pyint.create(7L)));
  public static uint64 PROPORTIONAL_SLASHING_MULTIPLIER = new uint64(pyint.create(1L));
  public static pyint MAX_PROPOSER_SLASHINGS = power(pyint.create(2L), pyint.create(4L));
  public static pyint MAX_ATTESTER_SLASHINGS = power(pyint.create(2L), pyint.create(1L));
  public static pyint MAX_ATTESTATIONS = power(pyint.create(2L), pyint.create(7L));
  public static pyint MAX_DEPOSITS = power(pyint.create(2L), pyint.create(4L));
  public static pyint MAX_VOLUNTARY_EXITS = power(pyint.create(2L), pyint.create(4L));
  public static DomainType DOMAIN_BEACON_PROPOSER = new DomainType("0x00000000");
  public static DomainType DOMAIN_BEACON_ATTESTER = new DomainType("0x01000000");
  public static DomainType DOMAIN_RANDAO = new DomainType("0x02000000");
  public static DomainType DOMAIN_DEPOSIT = new DomainType("0x03000000");
  public static DomainType DOMAIN_VOLUNTARY_EXIT = new DomainType("0x04000000");
  public static DomainType DOMAIN_SELECTION_PROOF = new DomainType("0x05000000");
  public static DomainType DOMAIN_AGGREGATE_AND_PROOF = new DomainType("0x06000000");
  public static pyint SAFE_SLOTS_TO_UPDATE_JUSTIFIED = power(pyint.create(2L), pyint.create(3L));
  public static pyint TARGET_AGGREGATORS_PER_COMMITTEE = power(pyint.create(2L), pyint.create(4L));
  public static pyint RANDOM_SUBNETS_PER_VALIDATOR = power(pyint.create(2L), pyint.create(0L));
  public static pyint EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION = power(pyint.create(2L), pyint.create(8L));
  public static pyint ATTESTATION_SUBNET_COUNT = pyint.create(64L);
  public static uint64 ETH_TO_GWEI = new uint64(power(pyint.create(10L), pyint.create(9L)));
  public static uint64 SAFETY_DECAY = new uint64(pyint.create(10L));
}
