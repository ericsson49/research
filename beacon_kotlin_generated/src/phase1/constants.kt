package phase1

import pylib.PyList
import pylib.len
import pylib.pow
import pylib.pyint
import pylib.times
import ssz.ceillog2
import ssz.uint64

val CONFIG_NAME = "mainnet"
val GENESIS_SLOT = Slot(0uL)
val GENESIS_EPOCH = Epoch(0uL)
val FAR_FUTURE_EPOCH = Epoch(((2uL.pow(64uL)) - 1uL))
val BASE_REWARDS_PER_EPOCH = uint64(4uL)
val DEPOSIT_CONTRACT_TREE_DEPTH = uint64((2uL.pow(5uL)))
val JUSTIFICATION_BITS_LENGTH = uint64(4uL)
val ENDIANNESS = "little"
val ETH1_FOLLOW_DISTANCE = uint64((2uL.pow(10uL)))
val MAX_COMMITTEES_PER_SLOT = uint64((2uL.pow(6uL)))
val TARGET_COMMITTEE_SIZE = uint64((2uL.pow(7uL)))
val MAX_VALIDATORS_PER_COMMITTEE = uint64((2uL.pow(11uL)))
val MIN_PER_EPOCH_CHURN_LIMIT = uint64((2uL.pow(2uL)))
val CHURN_LIMIT_QUOTIENT = uint64((2uL.pow(16uL)))
val SHUFFLE_ROUND_COUNT = uint64(90uL)
val MIN_GENESIS_ACTIVE_VALIDATOR_COUNT = uint64((2uL.pow(14uL)))
val MIN_GENESIS_TIME = uint64(1578009600uL)
val HYSTERESIS_QUOTIENT = uint64(4uL)
val HYSTERESIS_DOWNWARD_MULTIPLIER = uint64(1uL)
val HYSTERESIS_UPWARD_MULTIPLIER = uint64(5uL)
val PROPORTIONAL_SLASHING_MULTIPLIER = uint64(3uL)
val MIN_DEPOSIT_AMOUNT = Gwei(((2uL.pow(0uL)) * (10uL.pow(9uL))))
val MAX_EFFECTIVE_BALANCE = Gwei(((2uL.pow(5uL)) * (10uL.pow(9uL))))
val EJECTION_BALANCE = Gwei(((2uL.pow(4uL)) * (10uL.pow(9uL))))
val EFFECTIVE_BALANCE_INCREMENT = Gwei(((2uL.pow(0uL)) * (10uL.pow(9uL))))
val GENESIS_FORK_VERSION = Version("0x00000000")
val BLS_WITHDRAWAL_PREFIX = Bytes1("0x00")
val GENESIS_DELAY = uint64(172800uL)
val SECONDS_PER_SLOT = uint64(12uL)
val SECONDS_PER_ETH1_BLOCK = uint64(14uL)
val MIN_ATTESTATION_INCLUSION_DELAY = uint64((2uL.pow(0uL)))
val SLOTS_PER_EPOCH = uint64((2uL.pow(5uL)))
val MIN_SEED_LOOKAHEAD = uint64((2uL.pow(0uL)))
val MAX_SEED_LOOKAHEAD = uint64((2uL.pow(2uL)))
val MIN_EPOCHS_TO_INACTIVITY_PENALTY = uint64((2uL.pow(2uL)))
val EPOCHS_PER_ETH1_VOTING_PERIOD = uint64((2uL.pow(5uL)))
val SLOTS_PER_HISTORICAL_ROOT = uint64((2uL.pow(13uL)))
val MIN_VALIDATOR_WITHDRAWABILITY_DELAY = uint64((2uL.pow(8uL)))
val SHARD_COMMITTEE_PERIOD = uint64((2uL.pow(8uL)))
val EPOCHS_PER_HISTORICAL_VECTOR = uint64((2uL.pow(16uL)))
val EPOCHS_PER_SLASHINGS_VECTOR = uint64((2uL.pow(13uL)))
val HISTORICAL_ROOTS_LIMIT = uint64((2uL.pow(24uL)))
val VALIDATOR_REGISTRY_LIMIT = uint64((2uL.pow(40uL)))
val BASE_REWARD_FACTOR = uint64((2uL.pow(6uL)))
val WHISTLEBLOWER_REWARD_QUOTIENT = uint64((2uL.pow(9uL)))
val PROPOSER_REWARD_QUOTIENT = uint64((2uL.pow(3uL)))
val INACTIVITY_PENALTY_QUOTIENT = uint64((2uL.pow(24uL)))
val MIN_SLASHING_PENALTY_QUOTIENT = uint64((2uL.pow(5uL)))
val MAX_PROPOSER_SLASHINGS = (2uL.pow(4uL))
val MAX_ATTESTER_SLASHINGS = (2uL.pow(1uL))
val MAX_ATTESTATIONS = (2uL.pow(7uL))
val MAX_DEPOSITS = (2uL.pow(4uL))
val MAX_VOLUNTARY_EXITS = (2uL.pow(4uL))
val DOMAIN_BEACON_PROPOSER = DomainType("0x00000000")
val DOMAIN_BEACON_ATTESTER = DomainType("0x01000000")
val DOMAIN_RANDAO = DomainType("0x02000000")
val DOMAIN_DEPOSIT = DomainType("0x03000000")
val DOMAIN_VOLUNTARY_EXIT = DomainType("0x04000000")
val DOMAIN_SELECTION_PROOF = DomainType("0x05000000")
val DOMAIN_AGGREGATE_AND_PROOF = DomainType("0x06000000")
val SAFE_SLOTS_TO_UPDATE_JUSTIFIED = (2uL.pow(3uL))
val TARGET_AGGREGATORS_PER_COMMITTEE = (2uL.pow(4uL))
val RANDOM_SUBNETS_PER_VALIDATOR = (2uL.pow(0uL))
val EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION = (2uL.pow(8uL))
val ATTESTATION_SUBNET_COUNT = 64uL
val SAFETY_DECAY = uint64(10uL)
val CUSTODY_PRIME = pyint(((2uL.pow(256uL)) - 189uL))
val CUSTODY_SECRETS = uint64(3uL)
val BYTES_PER_CUSTODY_ATOM = uint64(32uL)
val CUSTODY_PROBABILITY_EXPONENT = uint64(10uL)
val RANDAO_PENALTY_EPOCHS = uint64((2uL.pow(1uL)))
val EARLY_DERIVED_SECRET_PENALTY_MAX_FUTURE_EPOCHS = uint64((2uL.pow(15uL)))
val EPOCHS_PER_CUSTODY_PERIOD = uint64((2uL.pow(14uL)))
val CUSTODY_PERIOD_TO_RANDAO_PADDING = uint64((2uL.pow(11uL)))
val MAX_CHUNK_CHALLENGE_DELAY = uint64((2uL.pow(15uL)))
val MAX_CUSTODY_CHUNK_CHALLENGE_RECORDS = uint64((2uL.pow(20uL)))
val MAX_CUSTODY_KEY_REVEALS = uint64((2uL.pow(8uL)))
val MAX_EARLY_DERIVED_SECRET_REVEALS = uint64((2uL.pow(0uL)))
val MAX_CUSTODY_CHUNK_CHALLENGES = uint64((2uL.pow(2uL)))
val MAX_CUSTODY_CHUNK_CHALLENGE_RESPONSES = uint64((2uL.pow(4uL)))
val MAX_CUSTODY_SLASHINGS = uint64((2uL.pow(0uL)))
val EARLY_DERIVED_SECRET_REVEAL_SLOT_REWARD_MULTIPLE = uint64((2uL.pow(1uL)))
val MINOR_REWARD_QUOTIENT = uint64((2uL.pow(8uL)))
val MAX_SHARDS = uint64((2uL.pow(10uL)))
val INITIAL_ACTIVE_SHARDS = uint64((2uL.pow(6uL)))
val LIGHT_CLIENT_COMMITTEE_SIZE = uint64((2uL.pow(7uL)))
val GASPRICE_ADJUSTMENT_COEFFICIENT = uint64((2uL.pow(3uL)))
val MAX_SHARD_BLOCK_SIZE = uint64((2uL.pow(20uL)))
val TARGET_SHARD_BLOCK_SIZE = uint64((2uL.pow(18uL)))
val SHARD_BLOCK_OFFSETS = PyList(1uL, 2uL, 3uL, 5uL, 8uL, 13uL, 21uL, 34uL, 55uL, 89uL, 144uL, 233uL)
val MAX_SHARD_BLOCKS_PER_ATTESTATION = len(SHARD_BLOCK_OFFSETS)
val BYTES_PER_CUSTODY_CHUNK = uint64((2uL.pow(12uL)))
val CUSTODY_RESPONSE_DEPTH = ceillog2((MAX_SHARD_BLOCK_SIZE / BYTES_PER_CUSTODY_CHUNK))
val MAX_GASPRICE = Gwei((2uL.pow(14uL)))
val MIN_GASPRICE = Gwei((2uL.pow(3uL)))
val NO_SIGNATURE = BLSSignature("0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
val ONLINE_PERIOD = OnlineEpochs((2uL.pow(3uL)))
val LIGHT_CLIENT_COMMITTEE_PERIOD = Epoch((2uL.pow(8uL)))
val DOMAIN_SHARD_PROPOSAL = DomainType("0x80000000")
val DOMAIN_SHARD_COMMITTEE = DomainType("0x81000000")
val DOMAIN_LIGHT_CLIENT = DomainType("0x82000000")
val DOMAIN_CUSTODY_BIT_SLASHING = DomainType("0x83000000")
val DOMAIN_LIGHT_SELECTION_PROOF = DomainType("0x84000000")
val DOMAIN_LIGHT_AGGREGATE_AND_PROOF = DomainType("0x85000000")
val PHASE_1_FORK_VERSION = Version("0x01000000")
val PHASE_1_FORK_SLOT = Slot(0uL)
val TARGET_LIGHT_CLIENT_AGGREGATORS_PER_SLOT = (2uL.pow(3uL))
val LIGHT_CLIENT_PREPARATION_EPOCHS = (2uL.pow(2uL))
